return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
View(tmp_M[tmp_M$index %in% possessionIds,])
}
for (i in unique(FAWSLEvents$match_id)[2]){
tmp_M <- FAWSLEvents[FAWSLEvents$match_id==i,]
possessionIds <- sapply(
unique(tmp_M$possession),
FUN=function(X){
return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
View(tmp_M[tmp_M$index %in% possessionIds,])
}
for (i in unique(FAWSLEvents$match_id)[2]){
tmp_M <- FAWSLEvents[FAWSLEvents$match_id==i,]
possessionIds <- sapply(
unique(tmp_M$possession),
FUN=function(X){
return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
View(tmp_M[tmp_M$index %in% possessionIds & !is.na(tmp_M$shot.statsbomb_xg),])
}
for (i in unique(FAWSLEvents$match_id)[2]){
tmp_M <- FAWSLEvents[FAWSLEvents$match_id==i,]
possessionIds <- sapply(
unique(tmp_M$possession),
FUN=function(X){
return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
View(tmp_M[tmp_M$index %in% possessionIds,])
}
maxPossessionId_M <- data.frame()
for (i in unique(FAWSLEvents$match_id)){
tmp_M <- FAWSLEvents[FAWSLEvents$match_id==i,]
possessionIds <- sapply(
unique(tmp_M$possession),
FUN=function(X){
return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
maxPossessionId_M <- rbind(maxPossessionId_M, tmp_M[tmp_M$index %in% possessionIds,])
}
View(maxPossessionId_M)
maxPossessionId_M <- data.frame()
for (i in unique(FAWSLEvents$match_id)){
tmp_M <- FAWSLEvents[FAWSLEvents$match_id==i,]
possessionIds <- sapply(
unique(tmp_M$possession),
FUN=function(X){
return(filter(tmp_M[tmp_M$possession==X,],index==max(index))$index)
}
)
maxPossessionId_M <- rbind(maxPossessionId_M, tmp_M[tmp_M$index %in% possessionIds & !is.na(tmp_M$shot.statsbomb_xg),])
}
View(maxPossessionId_M)
colnames(maxPossessionId_M)
data.frame(colnames(maxPossessionId_M))
View(data.frame(colnames(maxPossessionId_M)))
View(maxPossessionId_M[[21]][[3414]])
View(maxPossessionId_M[[21]][[3414]])
View(maxPossessionId_M[[21]][[450287]])
View(maxPossessionId_M)
maxPossessionId_M$shot.key_pass_id
!is.na(maxPossessionId_M$shot.key_pass_id)
maxPossessionId_M[!is.na(maxPossessionId_M$shot.key_pass_id),]
maxPossessionIdKeyPass_M <- maxPossessionId_M[!is.na(maxPossessionId_M$shot.key_pass_id),]
View(maxPossessionIdKeyPass_M)
FAWSLEvents$xA <- NA
View(FAWSLEvents)
head(maxPossessionIdKeyPass_M['shot.statsbomb_xg','shot.key_pass_id','id'])
head(maxPossessionIdKeyPass_M[,c('shot.statsbomb_xg','shot.key_pass_id','id')])
FAWSLEvents$id == maxPossessionIdKeyPass_M$shot.key_pass_id
FAWSLEvents[FAWSLEvents$id == maxPossessionIdKeyPass_M$shot.key_pass_id,]
FAWSLEvents[FAWSLEvents$id == maxPossessionIdKeyPass_M$shot.key_pass_id,]
FAWSLEvents[FAWSLEvents$id %in% maxPossessionIdKeyPass_M$shot.key_pass_id,]
FAWSLEvents[FAWSLEvents$id %in% maxPossessionIdKeyPass_M$shot.key_pass_id,'xA']
left_join(
FAWSLEvents,
maxPossessionIdKeyPass_M[,c('shot.statsbomb_xg','shot.key_pass_id')],
by=c('id'='shot.key_pass_id')
)
left_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)$shot.statsbomb_xg
left_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)
View(left_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
))
FAWSLEvents[FAWSLEvents$id %in% maxPossessionIdKeyPass_M$shot.key_pass_id,'xA']
?left_join
inner_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)
inner_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)[,'id']
inner_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)[,c('id','shot.statsbomb_xg','shot.key_pass_id')]
inner_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
)
View(inner_join(
FAWSLEvents,
maxPossessionIdKeyPass_M,
by=c('id'='shot.key_pass_id')
))
match(FAWSLEvents$id, maxPossessionIdKeyPass_M$shot.key_pass_id)
FAWSLEvents$xA[match(FAWSLEvents$id, maxPossessionIdKeyPass_M$shot.key_pass_id)]
match(FAWSLEvents$id, maxPossessionIdKeyPass_M$shot.key_pass_id)
for (i in c(1:nrow(FAWSLEvents))){
for (j in c(1:nrow(maxPossessionIdKeyPass_M))){
if (FAWSLEvents[i,'id'] == maxPossessionIdKeyPass_M[j,'shot.key_pass_id']){
FAWSLEvents[i,'xA'] = maxPossessionIdKeyPass_M[j,'shot.statsbomb_xg']
}
}
}
FAWSLEvents[!is.na(FAWSLEvents$xA)]
FAWSLEvents[!is.na(FAWSLEvents$xA),]
head(FAWSLEvents)
# step 4
FAWSLEvents[!is.na(FAWSLEvents$xA),]
# step 4
View(FAWSLEvents[!is.na(FAWSLEvents$xA),])
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
select(xADataset_M,-match_date, -match_name, -season_id, -competition_id)
# variable selection
select(xADataset_M,
-match_date,
-match_name,
-season_id,
-competition_id,
-match_id,
-starts_with(substituition)
)
# variable selection
select(xADataset_M,
-match_date,
-match_name,
-season_id,
-competition_id,
-match_id,
-starts_with(substitution)
)
# variable selection
select(xADataset_M,
-match_date,
-match_name,
-season_id,
-competition_id,
-match_id,
-starts_with(substitution)
)
# variable selection
select(xADataset_M,
-match_date,
-match_name,
-season_id,
-competition_id,
-match_id,
-starts_with('substitution')
)
# variable selection
select(xADataset_M,
-match_date,
-match_name,
-season_id,
-competition_id,
-match_id,
-starts_with('substitution'),
-starts_with('goalkeeper')
)
# location
# under_pressure
# counterpress
# play_patter.name
# starts_with('pass')
# variable selection
select(location,
under_pressure,
counterpress,
play_patter.name,
starts_with('pass')
)
# variable selection
select(xADataset_M,
location,
under_pressure,
counterpress,
play_patter.name,
starts_with('pass')
)
# variable selection
select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass')
)
View(select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass')
))
#-pass.assisted_shot_id
#-pass.shot_assist
#-pass.recipient.id
#-pass.recipient.name
#-pass.height.id
#-pass.type.id
#-pass.body_part.id
#-pass.outcome.id
# variable selection
select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
View(select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
))
# variable selection
xADataset_M <- select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
unlist(xADataset_M$location)
for (i in c(1:nrow(xADataset_M))){
start.X <- unlist(xADataset_M[i,'location'])[1]
start.Y <- unlist(xADataset_M[i,'location'])[2]
end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
View(xADataset_M)
for (i in c(1:nrow(xADataset_M))){
xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
xADataset_M <- select(xADataset_M, -location, -pass.end_location, xA, everything())
# variable selection
xADataset_M <- select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
xA,
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
xADataset_M <- select(xADataset_M,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
xA,
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
for (i in c(1:nrow(xADataset_M))){
xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
xADataset_M <- select(xADataset_M, -location, -pass.end_location, xA, everything())
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
xADataset_M <- select(xADataset_M,
xA,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
for (i in c(1:nrow(xADataset_M))){
xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
xADataset_M <- select(xADataset_M, -location, -pass.end_location)
xADataset_M
summary(xADataset_M)
xADataset_M <- select(xADataset_M, -under_pressure, -counterpress, -pass.cross, -pass.switch)
table(xADataset_M$pass.type.name)
table(xADataset_M$pass.outcome.name)
xADataset_M <- select(xADataset_M, -under_pressure, -counterpress, -pass.cross, -pass.switch, -pass.type.name, -pass.outcome.name)
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
xADataset_M <- select(xADataset_M,
xA,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
for (i in c(1:nrow(xADataset_M))){
xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
xADataset_M <- select(xADataset_M, -location, -pass.end_location)
summary(xADataset_M)
xADataset_M <- select(xADataset_M, -under_pressure, -counterpress, -pass.cross, -pass.switch, -pass.type.name, -pass.outcome.name)
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
xADataset_M <- select(xADataset_M,
xA,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
for (i in c(1:nrow(xADataset_M))){
# xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
# xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
# xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
# xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
unlist(xADataset_M[i,'location'])[1]
unlist(xADataset_M[i,'location'])[2]
}
for (i in c(1:nrow(xADataset_M))){
# xADataset_M$start.X <- unlist(xADataset_M[i,'location'])[1]
# xADataset_M$start.Y <- unlist(xADataset_M[i,'location'])[2]
# xADataset_M$end.X <- unlist(xADataset_M[i,'pass.end_location'])[1]
# xADataset_M$end.Y <- unlist(xADataset_M[i,'pass.end_location'])[2]
print(paste(unlist(xADataset_M[i,'location'])[1], unlist(xADataset_M[i,'location'])[2], sep=' '))
}
# step 4
xADataset_M <- FAWSLEvents[!is.na(FAWSLEvents$xA),]
# variable selection
xADataset_M <- select(xADataset_M,
xA,
location,
under_pressure,
counterpress,
play_pattern.name,
starts_with('pass'),
-pass.assisted_shot_id,
-pass.shot_assist,
-pass.recipient.id,
-pass.recipient.name,
-pass.height.id,
-pass.type.id,
-pass.body_part.id,
-pass.outcome.id
)
xADataset_M$start.X <- NA
xADataset_M$start.Y <- NA
xADataset_M$end.X <- NA
xADataset_M$end.Y <- NA
for (i in c(1:nrow(xADataset_M))){
xADataset_M[i, 'start.X'] <- unlist(xADataset_M[i,'location'])[1]
xADataset_M[i, 'start.Y'] <- unlist(xADataset_M[i,'location'])[2]
xADataset_M[i, 'end.X'] <- unlist(xADataset_M[i,'pass.end_location'])[1]
xADataset_M[i, 'end.Y'] <- unlist(xADataset_M[i,'pass.end_location'])[2]
}
xADataset_M <- select(xADataset_M, -location, -pass.end_location)
summary(xADataset_M)
xADataset_M <- select(xADataset_M, -under_pressure, -counterpress, -pass.cross, -pass.switch, -pass.type.name, -pass.outcome.name)
# splitting the datasets to train (75%) & test (25%)
set.seed(2)
trainXA_M=sample(1:nrow(xADataset_M), 0.75*nrow(xADataset_M))
testXA_M=xADataset_M[-trainXA_M,]
real_target=xADataset_M$xA[-trainXA_M]
############################################################
# Random forest
# randomforest, uses less variables so mtry should be smaller
# mtry (number of featuers considered by model): for regression p=p/3
# mtry (number of featuers considered by model): for classification p=sqrt(p)
xA_rf_model=randomForest(xA~.,
data=xADataset_M,
subset=trainXA_M,
mtry=length(colnames(xADataset_M))/3,
importance=TRUE)
?randomForest
??randomForest
library(randomForest)
############################################################
# Random forest
# randomforest, uses less variables so mtry should be smaller
# mtry (number of featuers considered by model): for regression p=p/3
# mtry (number of featuers considered by model): for classification p=sqrt(p)
xA_rf_model=randomForest(xA~.,
data=xADataset_M,
subset=trainXA_M,
mtry=length(colnames(xADataset_M))/3,
importance=TRUE)
is.na(xADataset_M)
apply(is.na(xADataset_M), 2, sum)
is.na(xADataset_M$pass.body_part.name)
xADataset_M[is.na(xADataset_M$pass.body_part.name),'pass.body_part.name']
unique(xADataset_M$pass.body_part.name)
xADataset_M[is.na(xADataset_M$pass.body_part.name),'pass.body_part.name'] <- 'Other'
############################################################
# Random forest
# randomforest, uses less variables so mtry should be smaller
# mtry (number of featuers considered by model): for regression p=p/3
# mtry (number of featuers considered by model): for classification p=sqrt(p)
xA_rf_model=randomForest(xA~.,
data=xADataset_M,
subset=trainXA_M,
mtry=length(colnames(xADataset_M))/3,
importance=TRUE)
